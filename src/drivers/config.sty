% SPDX-License-Identifier: CC-BY-SA-4.0
% Author: Matthieu Perrin

\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{config}[2024/06/24 Configuration of the Languages and Automate course]

\def\input@path{{src/frames}}
\graphicspath{{src/}{src/img/}}

\usepackage[export]{adjustbox}


\usepackage[french]{babel}

\RequirePackage{iftex}
\ifPDFTeX
  \RequirePackage[T1]{fontenc}
  \RequirePackage[utf8]{inputenc}
\fi

\RequirePackage{overlay}

\RequirePackage{frameconfig} 

\RequirePackage{ccicons}
\RequirePackage[normalem]{ulem}
\usepackage[clock]{ifsym}
\RequirePackage{fontawesome, pifont, MnSymbol}
\providecommand\cmark{\example{\text{\ding{51}}}}
\providecommand\xmark{\alert{\text{\ding{55}}}}

\pgfdeclarelayer{process@background}
\pgfdeclarelayer{process@foreground}


\RequirePackage{dominos}
\tikzset{
  domino top/.style={fill=structure!20},
  domino bottom/.style={fill=example!20},
}

\RequirePackage{statemachines}
\colorlet{sm@head@color}{alert}
\colorlet{sm@fill@alert}{alert}
\colorlet{sm@fill@example}{example}
\colorlet{sm@fill@structure}{structure}

\RequirePackage{trees}

\RequirePackage{algos} \AlgoEnglish
\RequirePackage{citations}

\RequirePackage{tabularx}
\RequirePackage{multirow}

\RequirePackage{graphicx}

\RequirePackage{amsmath, amssymb, amsfonts}
\RequirePackage{mathtools}
\RequirePackage{mathrsfs}
\RequirePackage{stmaryrd}

\providecommand\eqdef{\stackrel{\text{def}}{=}}

\usepackage{array}
\newcolumntype\math[1]{>{\(}#1<{\)}}
\newcounter{iteration}

\newcommand*\tableonly{%
  \omit\@ifnextchar<\table@only\table@@only%
}%
\protected\long\def\table@only<#1>#2{%
  \gdef\beamer@doifnotinframe{\cr}%
  \def\beamer@doifinframe{\cr#2}%
  \beamer@masterdecode{#1}%
  \beamer@donow
}%
\protected\long\def\table@@only#1{%
  \beamer@ifnextcharospec{\table@@@only{#1}}{\cr#1}%
}%
\long\def\table@@@only#1<#2>{%
  \gdef\beamer@doifnotinframe{\cr}%
  \def\beamer@doifinframe{\cr#1}%
  \beamer@masterdecode{#2}%
  \beamer@donow
}%

%\newcommand{\SendX}[1]{\textsc{#1}\texttt{.\textup{send}}}
%\newcommand{\ReceiveX}[1]{\textsc{#1}\texttt{.\textup{receive}}}
%\newcommand{\ReceivedX}[1]{\textsc{#1}\texttt{.received}}
%\newcommand{\Send}{\texttt{\textup{send}}}
%\newcommand{\Receive}{\texttt{\textup{receive}}}
%\newcommand{\Received}[1]{received}
%\newcommand{\SBroadcast}{\texttt{\textup{synch-broadcast}}}
%\newcommand{\Broadcast}{\texttt{\textup{broadcast}}}
%\newcommand{\Deliver}{\texttt{\textup{deliver}}}
%\newcommand{\Delivered}{\textsc.delivered}
\SetKwFunction{SBroadcast}{synch-broadcast}
\SetKwFunction{Broadcast}{broadcast}
\SetKwFunction{Deliver}{deliver}

\SetKw{Send}{send}
\SetKw{Receive}{receive}
\SetKw{Receives}{receives}

\RequirePackage{tikz}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{decorations.markings}
\usetikzlibrary{decorations.pathmorphing}
\usetikzlibrary{decorations.pathreplacing}
%\usetikzlibrary{backgrounds}

\newcommand{\po}{\xrightarrow{\mathsf{po}}}
\newcommand{\hb}{\xrightarrow{\mathsf{hb}}}

\RequirePackage{src/drivers/chat}

\tikzset{
  operation/.style={
    draw,
    fill=white,
    draw highlighted,
    fill highlighted,
    rectangle,
    rounded corners,
    anchor=center,
    align=center,
    inner xsep=3mm,
    inner ysep=1mm,
    outer sep=-1mm,
    minimum height=4mm,
  },
  event/.style={
    draw,
    fill=white,
    draw highlighted,
    fill highlighted,
    circle,
    inner sep=1.5mm,
    outer sep=-1mm,
  },
  message/.style={
    {Circle[length=2.4pt,width=2.4pt]}-{Stealth[length=5pt]},
    shorten <=-1.2pt,
    auto,
  },
  lin point/.style={
    {Circle[length=2pt,width=2pt]}-{Circle[length=2pt,width=2pt]},
    shorten <=-1pt,
    shorten >=-1pt,
  },
  every process/.style={
    draw=none,
    to path={
      \pgfextra{
        \begin{pgfonlayer}{process@background}
          \draw (\tikztostart) -- (\tikztotarget);
        \end{pgfonlayer}
        \begin{pgfonlayer}{process@foreground}
          \draw[thin, densely dotted] (\tikztostart) -- (\tikztotarget);
        \end{pgfonlayer}
      }
      (\tikztostart) -- (\tikztotarget) \tikztonodes
    }
  },
  process/.style={
    Bar-Straight Barb,
    every process,
  },
  crashed/.style={
    Bar-Rays,
    every process,
  },
  replica/.style={
    font=\footnotesize,
    above right,
  },
  replica below/.style={
    replica,
    below right,
  },
  bend below/.style={
    out=-60,
    in=120,
    distance=#1,
  },
  bend above/.style={
    out=60,
    in=-120,
    distance=#1,
  },
  bend above/.default=25,
  bend below/.default=25,
  bend left/.default=25,
  bend right/.default=25,
}

\tikzset{
  nosep/.style={inner sep=0pt, outer sep = 0pt, },
}

\tikzset{
  brace/.style={
    decorate,
    decoration={
      brace,
      amplitude=4pt,
    },
    every node/.append style={
      midway,
      auto,
      outer sep=3pt,
    },
  }
}



\DontPrintSemicolon
% 
%\let\alg@orig@algorithm\algorithm
%\let\alg@orig@endalgorithm\endalgorithm
%\renewenvironment{algorithm}[1][]{%
%  \alg@orig@algorithm[#1]%
%  \DontPrintSemicolon        % 1) coupe tous les ';' automatiques (lIf, tcp*, ...)
%  \providecommand{\Semi}{;\;}% 2) ta commande manuelle : imprime ';' puis fin de ligne algo
%}{%
%  \alg@orig@endalgorithm
%}
% 
%% Si tu utilises aussi l'environnement étoilé
%\expandafter\let\csname alg@orig@algorithm*\endcsname\csname algorithm*\endcsname
%\expandafter\let\csname alg@orig@endalgorithm*\endcsname\csname endalgorithm*\endcsname
%\expandafter\renewenvironment\csname algorithm*\endcsname[1][]{%
%  \csname alg@orig@algorithm*\endcsname[#1]%
%  \DontPrintSemicolon
%  \providecommand{\Semi}{;\;}
%}{%
%  \csname alg@orig@endalgorithm*\endcsname
%}
% 
%\AddToHook{env/algorithm/begin}{%
%  \DontPrintSemicolon%
%  \renewcommand{\;}{;\\}%
%}
%\AddToHook{env/algorithm*/begin}{%
%  \DontPrintSemicolon%
%  \renewcommand{\;}{;\\}%
%}


\pgfdeclarelayer{foreground}

\pgfsetlayers{background, chat@bubble, process@background, main, process@foreground, foreground}



\tikzset{
  faded background picture/.style={
    inner sep=0pt,
    outer sep=0pt,
    text height=8cm,
    append after command={
      \pgfextra{
        \begin{scope}
          \clip (\tikzlastnode.north west) rectangle (\tikzlastnode.south east);
          \path let \p1 = (\tikzlastnode.north), \p2 = (\tikzlastnode.south) in 
          node[anchor=south, inner sep=0pt, outer sep=0pt] at (\tikzlastnode.south) {\includegraphics[height=\dimexpr\y1-\y2\relax]{#1}};
          \fill[white, path fading=south] (\tikzlastnode.north west) rectangle (\tikzlastnode.south east) ;
          \fill[white, opacity=.5]        (\tikzlastnode.north west) rectangle (\tikzlastnode.south east) ;
          \draw (\tikzlastnode.north west) -- (\tikzlastnode.south west);
          \draw (\tikzlastnode.north east) -- (\tikzlastnode.south east);
          \fill[white, path fading=south] (\tikzlastnode.north west) rectangle (\tikzlastnode.east);
        \end{scope}
        \draw[white, ultra thick] (\tikzlastnode.north west) -- (\tikzlastnode.north east);
      }
    },
  },
}



\mode<all>
\endinput


